version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: hotel_mapper_db
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${DB_NAME:-hotel_mapper}
      POSTGRES_USER: ${DB_USER:-postgres}
      POSTGRES_PASSWORD: ${DB_PASS:-postgres}
      PGDATA: /var/lib/postgresql/data/pgdata
    ports:
      - "${DB_PORT:-5432}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ../../../database:/docker-entrypoint-initdb.d:ro
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-postgres} -d ${DB_NAME:-hotel_mapper}"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    networks:
      - hotel_network

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: hotel_mapper_redis
    restart: unless-stopped
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - hotel_network

  # Backend API
  backend:
    build:
      context: ../../../backend
      dockerfile: ../devops/docker/development/backend.Dockerfile
      target: development
    container_name: hotel_mapper_backend
    restart: unless-stopped
    environment:
      NODE_ENV: development
      PORT: 3001
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: ${DB_NAME:-hotel_mapper}
      DB_USER: ${DB_USER:-postgres}
      DB_PASS: ${DB_PASS:-postgres}
      REDIS_URL: redis://redis:6379
      UPLOAD_PATH: /app/uploads
      CORS_ORIGIN: http://localhost:5173
      LOG_LEVEL: debug
      JWT_SECRET: ${JWT_SECRET:-development-secret-key-change-in-production}
    ports:
      - "3001:3001"
      - "9229:9229" # Node.js debug port
    volumes:
      - ../../../backend:/app:delegated
      - /app/node_modules
      - uploads_data:/app/uploads
      - backend_logs:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - hotel_network

  # Frontend React
  frontend:
    build:
      context: ../../../frontend
      dockerfile: ../devops/docker/development/frontend.Dockerfile
      target: development
    container_name: hotel_mapper_frontend
    restart: unless-stopped
    environment:
      VITE_API_BASE_URL: http://localhost:3001/api
      VITE_NODE_ENV: development
      VITE_HMR_PORT: 5173
    ports:
      - "5173:5173"
    volumes:
      - ../../../frontend:/app:delegated
      - /app/node_modules
    networks:
      - hotel_network

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: hotel_mapper_nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ../nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ../nginx/development.conf:/etc/nginx/conf.d/default.conf:ro
      - uploads_data:/var/www/uploads:ro
      - nginx_logs:/var/log/nginx
    depends_on:
      - backend
      - frontend
    networks:
      - hotel_network

  # Prometheus Monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: hotel_mapper_prometheus
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    ports:
      - "9090:9090"
    volumes:
      - ../../monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ../../monitoring/prometheus/alerts.yml:/etc/prometheus/alerts.yml:ro
      - prometheus_data:/prometheus
    networks:
      - hotel_network

  # Grafana Dashboard
  grafana:
    image: grafana/grafana:latest
    container_name: hotel_mapper_grafana
    restart: unless-stopped
    environment:
      GF_SECURITY_ADMIN_USER: ${GRAFANA_USER:-admin}
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD:-admin}
      GF_INSTALL_PLUGINS: grafana-clock-panel
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ../../monitoring/grafana/dashboards:/var/lib/grafana/dashboards:ro
      - ../../monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    depends_on:
      - prometheus
    networks:
      - hotel_network

  # PostgreSQL Exporter for Prometheus
  postgres-exporter:
    image: prometheuscommunity/postgres-exporter:latest
    container_name: hotel_mapper_postgres_exporter
    restart: unless-stopped
    environment:
      DATA_SOURCE_NAME: "postgresql://${DB_USER:-postgres}:${DB_PASS:-postgres}@postgres:5432/${DB_NAME:-hotel_mapper}?sslmode=disable"
    ports:
      - "9187:9187"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - hotel_network

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  uploads_data:
    driver: local
  backend_logs:
    driver: local
  nginx_logs:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  hotel_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16